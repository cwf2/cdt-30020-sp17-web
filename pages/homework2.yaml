title:      "Homework 2: Packaging"
icon:       fa-book
navigation: []
internal:
external:
body:       |

  Homework for **Tuesday, January 24**  and **Thursday, January 26** are

  ## Readings

    1. [Scipy Lecture Notes](http://www.scipy-lectures.org/)

        - [1.2.5. Reusing code: scripts and modules](http://www.scipy-lectures.org/intro/language/reusing_code.html)

    2. [A Byte of Python](http://www.swaroopch.com/notes/python/)

        - [11. Modules](https://python.swaroopch.com/modules.html)

  ## Questions

  Once you have completed these readings, please answer the following
  questions:

  1. What is the difference between a **script** and a **module**? What is a
  **package**?

  2. What is the difference between these two statements? How do I call the
  `math` module's `cos` function in each case? Do I have access to `math`'s
  other functions?
  
          # Version 1
          import math
    
          # Version 2
          from math import cos
  
  3. Create a script, `counter1.py`, that asks the user for a word and then
  counts the number of characters in it. Here is an example execution of
  your script:

          $ ./counter1.py
          Enter any word: providential
          You typed 12 characters.

  4. Create another script, `counter2.py` that does the same thing, but takes
  its input from a single command line argument. I.e.
  
          $ ./counter2.py providential
          You typed 12 characters.
  
  5. Create a **module** called `letters.py` that contains a single function:

          :::python
          def letter_count(string):
              ''' Prints "You typed N characters." 
                  Where N is the number of chars in STRING.
              '''
              # TODO: Implement function

  5. Create a new script called `counter3.py` that utilizes your `letters.py`
  module to implement the same program as above.

  [Python]: https://www.python.org/

  ## Feedback

  If you have any questions, comments, or concerns regarding the course, please
  provide your feedback at the end of your response.

  ## Submission

  To submit your response, please commit your work (responses and scripts) to
  your **Readings** [GitLab] repository.

  If you wish to utilize [Git] in the terminal, here is a rough
  outline of the workflow:

  1. If you don't have a copy of your [Git] repository yet, you need to
  **clone** it first:

          :::bash
          # Create local clone of Git repository
          $ git clone git@gitlab.com:YOUR_USERNAME/homework.git

      Of course, replace `YOUR_USERNAME` with your username **:]**.

      **Note:** If you have already cloned it to your machine, you don't need
      to do this again.  You only need to **clone** once.

      <div class="alert alert-warning" markdown="1">
      #### <i class="fa fa-thumbs-o-up"></i> SSH_ASKPASS workaround

      If you try to do a `git clone` on the **student** machines and it starts
      but fails to ask you for a password, try running this command first:

          unsetenv SSH_ASKPASS

      This will force `git` to use the terminal to ask you for your password
      rather than popup a window.
      </div>

  2. Once you have a local [Git] repository go into the `homework/homework2`
  directory, record your answers in the `README.md` file, and edit your scripts:

          :::bash
          # Go to the right directory
          $ cd homework/homework2/

          # Record your reading responses in README.md
          $ nano README.md

          # Write counter1.py script
          $ nano counter1.py

          # Write counter2.py script
          $ nano counter2.py

          # Write letters.py module
          $ nano letters.py

          # Write counter3.py script
          $ nano counter3.py

  3. Once you have recorded your answers and written your scripts, you can 
  **commit** to the [Git] log and then send your changes to [GitLab]:

          :::bash
          # Add files to Git staging area
          $ git add README.md counter1.py counter2.py letters.py counter3.py

          # Review the changes you've staged
          $ git status

          # Commit work to log
          $ git commit -m "Complete homework 2"

      If you need to additional edits or modifications after you commit, you
      simply perform the `add` and `commit` to record each change.

      When you are done with your work, you can send it to your [GitLab]
      repository:

          # Send work to GitLab
          $ git push

  Of course, you may choose to edit and upload files via [GitLab]'s web
  interface, but I recommend you become familiar with [Git]'s command-line
  workflow.

  [GitLab]:     https://gitlab.com/
  [Git]:        https://git-scm.com/
